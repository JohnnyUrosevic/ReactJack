{"version":3,"sources":["Card.js","Player.js","Blackjack.js","serviceWorker.js","index.js"],"names":["Card","props","image_file","hidden","value","suit","style","className","src","alt","Player","card_html","cards","map","card","i","key","marginTop","text_color","get_value","length","color","generate_card","suits","values","Math","floor","random","hand","hand_values","low","v","high","concat","Number","non_busted","filter","max","handle_hit","set_hand","Blackjack","useState","player_hand","set_player_hand","dealer_hand","set_dealer_hand","player_busted","set_player_busted","player_turn","set_player_turn","betting","set_betting","bet","set_bet","balance","set_balance","status","set_status","useRef","current","player_hand_ref","dealer_hand_ref","bet_ref","end_round","useCallback","player_value","dealer_value","setTimeout","run_dealer_turn","useEffect","set_busted","onChange","e","target","isNaN","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.811f8717.chunk.js","sourcesContent":["import React from 'react';\nimport './Card.css'\n\nconst Card = (props) => {\n\n    const image_file = process.env.PUBLIC_URL + '/cards/' \n        + (props.hidden ? 'red_back' : props.value + props.suit) + '.png';\n    return <img style={props.style} className=\"card\" src={image_file} alt={props.value + props.suit}/>\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card.js'\nimport './Player.css'\nimport { get_value } from './Blackjack.js';\n\nconst Player = (props) => {\n    const card_to_html = (card, i) => <Card key={i} style={{marginTop: i * 2 + \"%\"}} suit={card.suit}\n        value={card.value} hidden={props.hidden} />\n    const card_html = props.cards.map(card_to_html);\n\n    const text_color = (get_value(props.cards) < 22) ? \"white\" : \"red\";\n\n    return (\n        <div className=\"cards\">\n            {props.cards.length > 0 && <p style={{color: text_color}}>{get_value(props.cards)}</p>}\n            {card_html}\n        </div>\n    );\n}\n\nexport default Player;\n","import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport './Blackjack.css'\nimport Player from './Player.js';\n\nconst generate_card = () => {\n  const suits = [\"C\", \"S\", \"D\", \"H\"];\n  const values = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"K\", \"Q\", \"J\", \"A\"];\n\n  const card = {\n    suit: suits[Math.floor(Math.random() * suits.length)],\n    value: values[Math.floor(Math.random() * values.length)],\n  }\n  return card;\n}\n\nconst is_soft_17 = (hand) => {\n  return hand.length === 2 && ((hand[0].value === \"A\" && hand[1].value === \"6\")\n    || (hand[0].value === \"6\" && hand[1].value === \"A\"));\n}\n\nexport const get_value = (hand) => {\n  let hand_values = [0];\n\n  for (let card of hand) {\n    switch (card.value) {\n        case \"A\":\n            let low = hand_values.map((v) => v + 1);\n            let high = hand_values.map((v) => v + 11);\n            \n            hand_values = low.concat(high);\n            break;\n        case \"K\":\n        case \"Q\":\n        case \"J\":\n            hand_values = hand_values.map((v) => v + 10);\n            break;\n        default:\n            hand_values = hand_values.map((v) => v + Number(card.value));\n    }\n  }\n\n  const non_busted = hand_values.filter((v) => v < 22);\n\n  if (!(non_busted.length === 0)) {\n      hand_values = non_busted;\n  }\n\n  return Math.max(...hand_values);\n}\n\nconst handle_hit = (set_hand) => {\n  set_hand(hand => hand.concat(generate_card()));\n}\n\nconst Blackjack = () => {\n  const [player_hand, set_player_hand] = useState([generate_card(), generate_card()]);\n  const [dealer_hand, set_dealer_hand] = useState([generate_card()]);\n \n  const [player_busted, set_player_busted] = useState(false);\n\n  const [player_turn, set_player_turn] = useState(true);\n  const [betting, set_betting] = useState(true);\n\n  const [bet, set_bet] = useState(100);\n\n  const [balance, set_balance] = useState(1000);\n\n  const [status, set_status] = useState(\"Player's Turn\");\n\n  const player_turn_ref = useRef(player_turn);\n  player_turn_ref.current = player_turn;\n\n  const player_hand_ref = useRef(player_hand);\n  player_hand_ref.current = player_hand;\n\n  const dealer_hand_ref = useRef(dealer_hand);\n  dealer_hand_ref.current = dealer_hand;\n\n  const bet_ref = useRef(bet);\n  bet_ref.current = bet;\n\n  const handle_change = (e) => {\n    const value = Number(e.target.value);\n\n    if (isNaN(value)) {\n      set_bet(bet => bet);\n    }\n    else if (value > balance) {\n      set_bet(balance);\n    }\n    else if (value <= 0) {\n      set_bet(1);\n    }\n    else {\n      set_bet(value);\n    }\n  }\n\n  const end_round = useCallback(() => {\n    const player_value = get_value(player_hand_ref.current);\n    const dealer_value = get_value(dealer_hand_ref.current);\n\n    if (player_busted || (dealer_value > player_value && dealer_value <= 21)) {\n      set_status(\"House Wins\");\n    }\n    else if (player_value === dealer_value) {\n      set_balance(balance => balance + bet_ref.current)\n      set_status(\"Tie Round\");\n    }\n    else {\n      set_balance(balance => balance + bet_ref.current * 2)\n      set_status(\"Player Wins\");\n    }\n\n    setTimeout(() => {\n      set_player_hand([generate_card(), generate_card()]);\n      set_dealer_hand([generate_card()]);\n      set_player_turn(true);\n      set_betting(true);\n      if (balance === 0) {\n        set_status(\"Game Over\")\n      }\n      else {\n        set_status(\"Player's Turn\");\n      }\n    }, 1000);\n  }, [player_busted, bet]);\n\n  const run_dealer_turn = useCallback(() => {\n    const value = get_value(dealer_hand_ref.current);\n    if (value >= 17 && !is_soft_17(dealer_hand_ref.current)) {\n      end_round();\n      return;\n    }\n\n    handle_hit(set_dealer_hand);\n\n    setTimeout(run_dealer_turn, 500);\n  }, []);\n\n  useEffect(() => {\n    const set_busted = (set_busted) => {\n      if (get_value(player_hand) > 21) {\n          set_busted(true);\n      }\n      else {\n        set_busted(false);\n      }\n    }\n\n    set_busted(set_player_busted);\n  }, [player_hand, run_dealer_turn]);\n\n  useEffect(() => {\n    if (player_busted) {\n      set_player_turn(false);\n      end_round();\n    }\n  }, [player_busted]);\n\n  useEffect(() => {\n    if (!player_turn && !player_busted) {\n      set_status(\"Dealer's turn\");\n      run_dealer_turn();\n    }\n  }, [player_turn]);\n\n  return (\n    <>\n      <h1>{status}</h1>\n      <p>Balance: {balance}</p>\n      <div className=\"dealer\">\n        <Player cards={dealer_hand} hidden={betting}/>\n      </div>\n      <div className=\"players\">\n        <Player cards={player_hand} hidden={betting}/>\n      </div>\n      {betting && balance > 0 && <div className=\"bet\">\n        <strong>Place a bet:</strong>\n        <input value={bet} onChange={handle_change}></input>\n        <button onClick={() => {set_betting(false); set_balance(balance => balance - bet)}}>Submit</button>\n      </div>\n      }\n      {player_turn && !betting && <div className=\"buttons\">\n          <button onClick={() => handle_hit(set_player_hand)}>Hit</button>\n          <button onClick={() => set_player_turn(false)}>Stand</button>\n      </div>}\n    </>\n  );\n}\n\nexport default Blackjack;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Blackjack from './Blackjack';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Blackjack />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}